package maven2sbt.core

import hedgehog._
import hedgehog.runner._

import scala.xml.Elem

/**
  * @author Kevin Lee
  * @since 2019-04-22
  */
object RepositorySpec extends Properties {

  override def tests: List[Test] = List(
    property("test Repository.from(xml)", testRepositoryFromXml)
  , property("test Repository.from(xml) with empty RepoName", testRepositoryFromXmlWithEmptyRepoName)
  , property("test Repository.from(xml) with no RepoName", testRepositoryFromXmlWithNoRepoName)
  , property("test Repository.render(Repository)", testRenderRepository)
  , property("test Repository.render(Repository) with empty RepoName", testRenderRepositoryWithEmptyName)
  , property("test Repository.render(Repository) with no RepoName", testRenderRepositoryWithNoName)
  )

  def testRepositoryFromXml: Property = for {
    repositories <- Gens.genRepository.list(Range.linear(0, 10)).log("repositories")
  } yield {
    val pom = generatePom(repositories)
    val actual = Repository.from(pom)
    actual ==== repositories
  }

  def testRepositoryFromXmlWithEmptyRepoName: Property = for {
    repositories <- Gens.genRepositoryWithEmptyName.list(Range.linear(0, 10)).log("repositories")
  } yield {
    val pom = generatePom(repositories)
    val actual = Repository.from(pom)
    actual ==== repositories
  }

  def testRepositoryFromXmlWithNoRepoName: Property = for {
    repositories <- Gens.genRepositoryWithNoName.list(Range.linear(0, 10)).log("repositories")
  } yield {
    val pom = generatePom(repositories)
    val actual = Repository.from(pom)
    actual ==== repositories
  }

  def testRenderRepository: Property = for {
    repository <- Gens.genRepository.log("repository")
  } yield {
    repository.name match {
      case Some(repoName) =>
        val expected = s""""${repoName.repoName}" at "${repository.url.repoUrl}""""
        val actual = Repository.render(repository)
        actual ==== expected
      case None =>
        Result.failure.log(s"RepoName in the Repository generated by Gens.genRepository is None. repository: $repository")
    }
  }

  def testRenderRepositoryWithEmptyName: Property = for {
    repository <- Gens.genRepositoryWithEmptyName.log("repository")
  } yield {
    val expected = s""""${repository.id.repoId}" at "${repository.url.repoUrl}""""
    val actual = Repository.render(repository)
    actual ==== expected
  }

  def testRenderRepositoryWithNoName: Property = for {
    repository <- Gens.genRepositoryWithNoName.log("repository")
  } yield {
    val expected = s""""${repository.id.repoId}" at "${repository.url.repoUrl}""""
    val actual = Repository.render(repository)
    actual ==== expected
  }



  private def genRepo(
    repoId: Repository.RepoId,
    maybeRepoName: Option[Repository.RepoName],
    repoUrl: Repository.RepoUrl
  ): Elem = maybeRepoName match {
    case Some(repoName) =>
      <repository>
        <id>{ repoId.repoId }</id>
        <name>{ repoName.repoName }</name>
        <url>{ repoUrl.repoUrl }</url>
      </repository>

    case None =>
      <repository>
        <id>{ repoId.repoId }</id>
        <url>{ repoUrl.repoUrl }</url>
      </repository>
  }


  private def generatePom(repos: List[Repository]): Elem =
    if (repos.isEmpty)
      <project></project>
    else
      <project>
        <repositories>
          {
          repos.map { case Repository(id, name, url)  =>
            genRepo(id, name, url)
          }
          }
        </repositories>
      </project>

}
